buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.14.4'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.android.support:appcompat-v7:21.0.0'
    compile 'com.github.ksoichiro:simplealertdialog:1.2.1@aar'
    compile 'com.nineoldandroids:library:2.4.0'
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 21
        versionCode 2
        versionName "0.1.1"
        applicationId "com.appmanager.android"
    }

    signingConfigs {
        release {
            def filePrivateProperties = file("private.properties")
            if (filePrivateProperties.exists()) {
                Properties propsPrivate = new Properties()
                propsPrivate.load(new FileInputStream(filePrivateProperties))

                storeFile file(propsPrivate['key.store'])
                keyAlias propsPrivate['key.alias']
                storePassword propsPrivate['key.store.password']
                keyPassword propsPrivate['key.alias.password']
            }
        }
    }

    productFlavors {
        // Flavor to develop/test experimental feature.
        development {
            applicationId "com.appmanager.android.dev"
            buildConfigField "String", "CONFIG_URL", "\"file:///android_asset/config.json\""
        }
        // Flavor to production release. This should be as stable as possible.
        production {
            buildConfigField "String", "CONFIG_URL", "\"https://raw.githubusercontent.com/app-manager/AppManager-for-Android/master/app/src/main/assets/config.json\""
        }
    }

    buildTypes {
        debug {
            zipAlignEnabled true
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            def filePrivateProperties = file("private.properties")
            if (filePrivateProperties.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    project.ext.gitHash = "git rev-parse --short HEAD".execute().text.trim()

    applicationVariants.all { variant ->
        def output = variant.outputs.get(0)
        File apk = output.outputFile
        String newName = output.outputFile.name.replace(".apk", "-${variant.mergedFlavor.versionCode}-${variant.mergedFlavor.versionName}-${project.ext.gitHash}.apk")
                .replace("app-", "${variant.mergedFlavor.applicationId}-")
        output.outputFile = new File(apk.parentFile, newName)
    }
}
